import React, { useEffect, useState } from 'react';
import adminService from '../../services/adminService';
import { Button, Badge } from '../../components/ui';
import { showError, showSuccess } from '../../utils/toast';
import './AdminDashboard.css';

const AdminDashboard = () => {
  const [users, setUsers] = useState([]);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [editingUser, setEditingUser] = useState(null);
  const [editForm, setEditForm] = useState({ name: '', email: '', role: 'user' });
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [createForm, setCreateForm] = useState({ name: '', email: '', password: '', role: 'user' });

  useEffect(() => {
    void fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [usersData, statsData] = await Promise.all([
        adminService.getAllUsers(),
        adminService.getStats()
      ]);
      setUsers(usersData.users);
      setStats(statsData.stats);
    } catch (error) {
      showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu qu·∫£n tr·ªã.');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id, name) => {
    if (!window.confirm(`X√≥a ng∆∞·ªùi d√πng "${name}" kh·ªèi h·ªá th·ªëng?`)) {
      return;
    }
    try {
      await adminService.deleteUser(id);
      showSuccess('ƒê√£ x√≥a ng∆∞·ªùi d√πng');
      fetchData();
    } catch (error) {
      showError(error.response?.data?.message || 'Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng');
    }
  };

  const handleEdit = (user) => {
    setEditingUser(user);
    setEditForm({ name: user.name, email: user.email, role: user.role });
  };

  const handleUpdateUser = async (event) => {
    event.preventDefault();
    try {
      await adminService.updateUser(editingUser.id, editForm);
      showSuccess('C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng');
      setEditingUser(null);
      fetchData();
    } catch (error) {
      showError(error.response?.data?.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng');
    }
  };

  const handleCreateUser = async (event) => {
    event.preventDefault();

    // Validation
    if (!createForm.name || !createForm.email || !createForm.password) {
      showError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
      return;
    }

    if (createForm.password.length < 6) {
      showError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      return;
    }

    try {
      await adminService.createUser(createForm);
      showSuccess('T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng');
      setShowCreateModal(false);
      setCreateForm({ name: '', email: '', password: '', role: 'user' });
      fetchData();
    } catch (error) {
      showError(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng');
    }
  };

  return (
    <div className="admin">
      <header className="admin-hero">
        <div className="admin-hero__main">
          <span className="admin-chip">Trung t√¢m qu·∫£n tr·ªã</span>
          <h1>Qu·∫£n l√Ω ng∆∞·ªùi d√πng & quy·ªÅn t·∫°i Group24</h1>
          <p>
            Theo d√µi tr·∫°ng th√°i t√†i kho·∫£n, ph√¢n quy·ªÅn theo ph√≤ng ban v√† ƒë·∫£m b·∫£o vi·ªác s·ª≠ d·ª•ng h·ªá th·ªëng tu√¢n th·ªß ch√≠nh s√°ch n·ªôi b·ªô.
            T·ª´ ƒë√¢y b·∫°n c√≥ th·ªÉ reset m·∫≠t kh·∫©u, kh√≥a t√†i kho·∫£n ho·∫∑c c·∫≠p nh·∫≠t vai tr√≤ ngay l·∫≠p t·ª©c.
          </p>
          <div className="admin-hero__actions">
            <Button type="button" variant="primary" onClick={() => setShowCreateModal(true)}>
              + Th√™m ng∆∞·ªùi d√πng
            </Button>
            <Button type="button" variant="outline" onClick={fetchData}>
              L√†m m·ªõi d·ªØ li·ªáu
            </Button>
            <Button as="a" href="mailto:support@group24.vn" variant="ghost">
              Li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t
            </Button>
          </div>
        </div>
        <aside className="admin-hero__aside" aria-label="Checklist ki·ªÉm tra nhanh">
          <div className="admin-checklist">
            <h3>Checklist b√†n giao</h3>
            <ul>
              <li>B·∫£o ƒë·∫£m m·ªói ph√≤ng ban c√≥ t·ªëi thi·ªÉu m·ªôt qu·∫£n tr·ªã vi√™n.</li>
              <li>Kh√≥a c√°c t√†i kho·∫£n ƒë√£ ngh·ªâ vi·ªác ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông 30 ng√†y.</li>
              <li>Xu·∫•t b√°o c√°o ƒë·ªãnh k·ª≥ v√† l∆∞u tr·ªØ tr√™n h·ªá th·ªëng n·ªôi b·ªô.</li>
            </ul>
          </div>
        </aside>
      </header>

      {loading ? (
        <div className="admin-loading">
          <div className="admin-spinner" />
          <p>ƒêang t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng...</p>
        </div>
      ) : (
        <>
          {stats && (
            <section className="admin-metrics">
              <article className="admin-metric">
                <span className="admin-metric__icon">üë•</span>
                <h3>{stats.totalUsers}</h3>
                <p>T·ªïng ng∆∞·ªùi d√πng</p>
              </article>
              <article className="admin-metric">
                <span className="admin-metric__icon">üëë</span>
                <h3>{stats.adminUsers}</h3>
                <p>Qu·∫£n tr·ªã vi√™n</p>
              </article>
              <article className="admin-metric">
                <span className="admin-metric__icon">üë§</span>
                <h3>{stats.regularUsers}</h3>
                <p>Th√†nh vi√™n</p>
              </article>
              <article className="admin-metric">
                <span className="admin-metric__icon">‚ú®</span>
                <h3>{stats.newUsersLast30Days}</h3>
                <p>M·ªõi 30 ng√†y</p>
              </article>
            </section>
          )}

          <section className="admin-table">
            <header>
              <div>
                <span className="admin-table__eyebrow">Danh s√°ch ng∆∞·ªùi d√πng</span>
                <h2>Ki·ªÉm so√°t quy·ªÅn v√† h·ªì s∆°</h2>
                <p>M·ªçi thay ƒë·ªïi ƒë∆∞·ª£c ghi l·∫°i trong nh·∫≠t k√Ω b·∫£o m·∫≠t v√† ph·∫£n √°nh ngay tr√™n dashboard ng∆∞·ªùi d√πng.</p>
              </div>
            </header>

            <div className="admin-table__wrapper">
              <table>
                <thead>
                  <tr>
                    <th>#</th>
                    <th>T√™n</th>
                    <th>Email</th>
                    <th>Vai tr√≤</th>
                    <th>Ng√†y t·∫°o</th>
                    <th>H√†nh ƒë·ªông</th>
                  </tr>
                </thead>
                <tbody>
                  {users.map((entry, index) => (
                    <tr key={entry.id}>
                      <td>{index + 1}</td>
                      <td>
                        <div className="admin-user">
                          {entry.avatar ? (
                            <img src={`http://localhost:3000${entry.avatar}`} alt={entry.name} />
                          ) : (
                            <span>{entry.name.charAt(0).toUpperCase()}</span>
                          )}
                          <div>
                            <p>{entry.name}</p>
                            <small>{entry.role === 'admin' ? 'Qu·∫£n tr·ªã vi√™n' : 'Th√†nh vi√™n'}</small>
                          </div>
                        </div>
                      </td>
                      <td>{entry.email}</td>
                      <td>
                        <Badge variant={entry.role === 'admin' ? 'warning' : 'default'}>
                          {entry.role}
                        </Badge>
                      </td>
                      <td>{new Date(entry.createdAt).toLocaleDateString('vi-VN')}</td>
                      <td>
                        <div className="admin-actions-inline">
                          <Button type="button" size="sm" variant="outline" onClick={() => handleEdit(entry)}>
                            Ch·ªânh s·ª≠a
                          </Button>
                          <Button
                            type="button"
                            size="sm"
                            variant="danger"
                            onClick={() => handleDelete(entry.id, entry.name)}
                          >
                            X√≥a
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </section>
        </>
      )}

      {showCreateModal && (
        <div className="admin-dialog" role="dialog" aria-modal="true" onClick={() => setShowCreateModal(false)}>
          <div className="admin-dialog__content surface-card" onClick={(event) => event.stopPropagation()}>
            <div className="admin-dialog__header">
              <div>
                <p className="admin-eyebrow">T·∫°o ng∆∞·ªùi d√πng m·ªõi</p>
                <h3>Th√™m ng∆∞·ªùi d√πng v√†o h·ªá th·ªëng</h3>
              </div>
              <button type="button" className="admin-dialog__close" onClick={() => setShowCreateModal(false)}>
                √ó
              </button>
            </div>

            <form className="admin-dialog__form" onSubmit={handleCreateUser}>
              <label>
                <span>H·ªç v√† t√™n</span>
                <input
                  type="text"
                  value={createForm.name}
                  onChange={(event) => setCreateForm({ ...createForm, name: event.target.value })}
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  required
                />
              </label>
              <label>
                <span>Email</span>
                <input
                  type="email"
                  value={createForm.email}
                  onChange={(event) => setCreateForm({ ...createForm, email: event.target.value })}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                  required
                />
              </label>
              <label>
                <span>M·∫≠t kh·∫©u</span>
                <input
                  type="password"
                  value={createForm.password}
                  onChange={(event) => setCreateForm({ ...createForm, password: event.target.value })}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u (t·ªëi thi·ªÉu 6 k√Ω t·ª±)"
                  required
                  minLength={6}
                />
              </label>
              <label>
                <span>Vai tr√≤</span>
                <select value={createForm.role} onChange={(event) => setCreateForm({ ...createForm, role: event.target.value })}>
                  <option value="user">User</option>
                  <option value="admin">Admin</option>
                </select>
              </label>

              <div className="admin-dialog__actions">
                <Button type="button" variant="ghost" onClick={() => setShowCreateModal(false)}>
                  H·ªßy
                </Button>
                <Button type="submit" variant="primary">
                  T·∫°o ng∆∞·ªùi d√πng
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {editingUser && (
        <div className="admin-dialog" role="dialog" aria-modal="true" onClick={() => setEditingUser(null)}>
          <div className="admin-dialog__content surface-card" onClick={(event) => event.stopPropagation()}>
            <div className="admin-dialog__header">
              <div>
                <p className="admin-eyebrow">C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng</p>
                <h3>{editingUser.name}</h3>
              </div>
              <button type="button" className="admin-dialog__close" onClick={() => setEditingUser(null)}>
                √ó
              </button>
            </div>

            <form className="admin-dialog__form" onSubmit={handleUpdateUser}>
              <label>
                <span>H·ªç v√† t√™n</span>
                <input
                  type="text"
                  value={editForm.name}
                  onChange={(event) => setEditForm({ ...editForm, name: event.target.value })}
                  required
                />
              </label>
              <label>
                <span>Email</span>
                <input
                  type="email"
                  value={editForm.email}
                  onChange={(event) => setEditForm({ ...editForm, email: event.target.value })}
                  required
                />
              </label>
              <label>
                <span>Vai tr√≤</span>
                <select value={editForm.role} onChange={(event) => setEditForm({ ...editForm, role: event.target.value })}>
                  <option value="user">User</option>
                  <option value="admin">Admin</option>
                </select>
              </label>

              <div className="admin-dialog__actions">
                <Button type="button" variant="ghost" onClick={() => setEditingUser(null)}>
                  H·ªßy
                </Button>
                <Button type="submit" variant="primary">
                  L∆∞u thay ƒë·ªïi
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminDashboard;

